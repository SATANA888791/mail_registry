# app/forms.py

from wtforms import ValidationError
from app.models import User
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField, SelectField, FileField, DateField, ValidationError
from wtforms.validators import DataRequired, Length, Email, Optional
from app.models import Role
from wtforms import BooleanField

# ---------------- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ----------------

class LoginForm(FlaskForm):
    username = StringField(
        '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', 
        validators=[DataRequired(), Length(1, 64)]
    )
    password = PasswordField(
        '–ü–∞—Ä–æ–ª—å', 
        validators=[DataRequired(), Length(1, 128)]
    )
    submit = SubmitField('–í–æ–π—Ç–∏')

    display_name = StringField(
        '–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è', 
        validators=[Length(max=120)]
    )

    remember = BooleanField('–ó–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω—è')

# ---------------- –ê–¥–º–∏–Ω: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ----------------

class AdminUserForm(FlaskForm):
    username = StringField(
        '–õ–æ–≥–∏–Ω', 
        validators=[DataRequired(), Length(3, 64)]
    )
    email = StringField(
        'E-mail',
        validators=[DataRequired(), Email(), Length(1, 120)]
    )

    display_name = StringField(
        '–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è', 
        validators=[DataRequired(), Length(max=120)]
    
    )

    password = PasswordField(
        '–ü–∞—Ä–æ–ª—å', 
    )

    submit = SubmitField('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')  # üëà –≤–æ—Ç —Ç–æ, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç

    role = SelectField('–†–æ–ª—å', coerce=int, validators=[DataRequired()])

def validate_password(self, field):
    # –µ—Å–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ ‚Äî –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω
    if not hasattr(self, 'obj') or self.obj is None:
        if not field.data:
            raise ValidationError('–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
        elif len(field.data) < 6:
            raise ValidationError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.')
    else:
        # –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω ‚Äî –ø—Ä–æ–≤–µ—Ä–∏–º –¥–ª–∏–Ω—É
        if field.data and len(field.data) < 6:
            raise ValidationError('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 6 —Å–∏–º–≤–æ–ª–æ–≤.')


    role = SelectField(
        '–†–æ–ª—å',
        coerce=int, 
        validators=[DataRequired()]
    )

    submit = SubmitField('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ–º —Ä–æ–ª–∏ –∏–∑ –ë–î
        self.role.choices = [
            (r.id, r.name) for r in Role.query.order_by(Role.name).all()
        ]

    def validate_username(self, field):
        user = User.query.filter_by(username=field.data).first()
        if user and (not self.obj or user.id != self.obj.id):
            raise ValidationError('–¢–∞–∫–æ–π –ª–æ–≥–∏–Ω —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.')

    def validate_email(self, field):
        user = User.query.filter_by(email=field.data).first()
        if user and (not self.obj or user.id != self.obj.id):
            raise ValidationError('–≠—Ç–æ—Ç email —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.')


# ---------------- –ò—Å—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞ ----------------

class OutgoingForm(FlaskForm):
    subject = StringField(
        '–¢–µ–º–∞ –ø–∏—Å—å–º–∞', 
        validators=[DataRequired(), Length(1, 256)]
    )
    recipient = StringField(
        '–ü–æ–ª—É—á–∞—Ç–µ–ª—å', 
        validators=[DataRequired(), Length(1, 128)]
    )

    is_protected = BooleanField('üîí –ó–∞–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')

    submit = SubmitField('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')

    

# ---------------- –í—Ö–æ–¥—è—â–∏–µ –ø–∏—Å—å–º–∞ ----------------

class IncomingForm(FlaskForm):
    date = DateField(
        '–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è', 
        format='%Y-%m-%d',
        validators=[DataRequired()]
    )
    organization = StringField(
        '–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è', 
        validators=[DataRequired(), Length(1, 128)]
    )
    subject = StringField(
        '–¢–µ–º–∞ –ø–∏—Å—å–º–∞', 
        validators=[DataRequired(), Length(1, 256)]
    )
    forwarded_to = StringField(
        '–ü–µ—Ä–µ–¥–∞–Ω–æ –∫–æ–º—É', 
        validators=[Optional(), Length(0, 64)]
    )
    submit = SubmitField('–°–æ—Ö—Ä–∞–Ω–∏—Ç—å')
