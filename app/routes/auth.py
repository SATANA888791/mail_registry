from flask import Blueprint, render_template, redirect, url_for, flash, request, session, current_app
from flask_login import login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime

from app import db
from app.models import User, Role
from app.forms import LoginForm
from app.models import LoginAttempt


auth_bp = Blueprint('auth', __name__, template_folder='../templates/auth')

# –°—Ç—Ä–∞–Ω–∏—Ü–∞, –º–∞—Ä—à—Ä—É—Ç –ª–æ–≥–∏–Ω–∞
@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('my_letters.outgoing_list'))

    form = LoginForm()
    ip = request.remote_addr
    session['login_attempts'] = session.get('login_attempts', 0)
    current_attempts = session['login_attempts']

    if form.validate_on_submit():
        user = User.query.filter_by(username=form.username.data).first()
        attempt = LoginAttempt(
            username=form.username.data,
            ip_address=ip,
            user_id=user.id if user else None,
            successful=False
        )
        db.session.add(attempt)

        if not user:
            session['login_attempts'] = current_attempts + 1
            current_app.logger.warning(
                f'üëª –ü–æ–ø—ã—Ç–∫–∞ {current_attempts+1} - –ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {form.username.data}, IP: {ip}'
            )
            flash('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å.', 'danger')
            db.session.commit()
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
            if user.login_block_status == 'permanent':
                flash('‚õî –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.', 'danger')
                db.session.commit()
                return render_template('auth/login.html', form=form)

            if user.login_block_status == 'temporary':
                remaining = max(1, user.remaining_block_time)
                flash(f'üïí –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —á–µ—Ä–µ–∑ {remaining} –º–∏–Ω.', 'warning')
                db.session.commit()
                return render_template('auth/login.html', form=form)

            if user.check_password(form.password.data):
                attempt.successful = True
                login_user(user, remember=form.remember.data)
                session['login_attempts'] = 0
                
                # –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ
                user.last_failed_attempt = None
                
                current_app.logger.info(
                    f'üîë –£—Å–ø–µ—Ö –ø–æ—Å–ª–µ {current_attempts+1} –ø–æ–ø—ã—Ç–æ–∫ | {user.username} | IP: {ip}'
                )
                flash(f'{user.get_greeting()} {user.role_emoji} {user.display_name}!', 'success')
                db.session.commit()
                return redirect(url_for('my_letters.outgoing_list'))

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞
            session['login_attempts'] = current_attempts + 1
            current_attempts += 1
            
            current_app.logger.warning(
                f'‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {current_attempts} - –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å | {user.username} | IP: {ip}'
            )
            
            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–æ–ª–∏—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            user.apply_login_security_policy(current_attempts)
            db.session.commit()

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –ø—Ä–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
            if current_attempts >= 5:
                current_app.logger.error(
                    f'üïµÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞: {current_attempts} –ø–æ–ø—ã—Ç–æ–∫ | {user.username} | IP: {ip}'
                )
                flash('üìõ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫. –î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.', 'danger')

    return render_template('auth/login.html', form=form)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞, –º–∞—Ä—à—Ä—É—Ç –≤—ã—Ö–æ–¥–∞
@auth_bp.route('/logout')
@login_required
def logout():
    ip = request.remote_addr  # üõú –ü–æ–ª—É—á–∞–µ–º IP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_app.logger.info(f'üîë –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {current_user.username}, IP: {ip} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã')
    logout_user()
    flash('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.', 'info')
    
    return redirect(url_for('auth.login'))


# @auth_bp.route('/register', methods=['GET', 'POST'])
# def register():
#     form = RegisterForm()
#     if form.validate_on_submit():
#         # –ù–∞–π—Ç–∏ —Ä–æ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (editor)
#         role = Role.query.filter_by(name='editor').first()
#         user = User(
#             username=form.username.data,
#             email=form.email.data,
#             password_hash=generate_password_hash(form.password.data),
#             role=role
#         )
#         db.session.add(user)
#         db.session.commit()
#         flash('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É.', 'success')
#         return redirect(url_for('auth.login'))
#     return render_template('auth/register.html', form=form)

# –°—Ç—Ä–∞–Ω–∏—Ü–∞, –º–∞—Ä—à—Ä—É—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
