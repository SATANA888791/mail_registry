from flask import Blueprint, render_template, redirect, url_for, request, flash
from flask import send_file
from flask import session
import os
import datetime
from flask_login import login_required, current_user
from app import db
from app.models import LetterOutgoing, Attachment
from app.forms import OutgoingForm
from app.utils import generate_outgoing_number, save_attachment, allowed_file
from app.decorators import admin_required



outgoing_bp = Blueprint('outgoing', __name__, template_folder='../templates/outgoing')


@outgoing_bp.route('/new', methods=['GET', 'POST'])
@login_required
def new_outgoing():
    form = OutgoingForm()
    if form.validate_on_submit():
        number = generate_outgoing_number()
        letter = LetterOutgoing(
            user_id=current_user.id,
            number=number,
            subject=form.subject.data,
            recipient=form.recipient.data,
            is_protected=form.is_protected.data
        )
        db.session.add(letter)
        db.session.commit()
        flash(f'–ò—Å—Ö–æ–¥—è—â–µ–µ –ø–∏—Å—å–º–æ {number} —Å–æ–∑–¥–∞–Ω–æ.', 'success')
        return redirect(url_for('outgoing.attachments', letter_id=letter.id))
    return render_template('outgoing/new.html', form=form)


@outgoing_bp.route('/<int:letter_id>/attachments', methods=['GET', 'POST'])
@login_required
def attachments(letter_id):
    letter = LetterOutgoing.query.get_or_404(letter_id)

    # üîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    # üëÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≤–ª–æ–∂–µ–Ω–∏—è–º
    # üîí –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞
    if letter.is_protected:
    # –ó–∞—â–∏—â—ë–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ ‚Äî —Ç–æ–ª—å–∫–æ –∞–≤—Ç–æ—Ä –∏–ª–∏ –∞–¥–º–∏–Ω
        if current_user.id != letter.user_id and current_user.role.name != 'Admin':
            flash('‚õî –í–ª–æ–∂–µ–Ω–∏–µ –∑–∞—â–∏—â–µ–Ω–æ –∞–≤—Ç–æ—Ä–æ–º. –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.', 'danger')
            return redirect(url_for('outgoing.list_outgoing'))
    else:
    # –û—Ç–∫—Ä—ã—Ç–æ–µ –ø–∏—Å—å–º–æ ‚Äî viewer –º–æ–∂–µ—Ç —Å–º–æ—Ç—Ä–µ—Ç—å
        if current_user.role.name == 'Viewer' and current_user.id != letter.user_id:
        # —Ä–∞–∑—Ä–µ—à–∞–µ–º
         pass
        elif current_user.id != letter.user_id and current_user.role.name not in ['Admin', 'Editor']:
            flash('‚õî –í–∞–º –Ω–µ —Ä–∞–∑—Ä–µ—à—ë–Ω –¥–æ—Å—Ç—É–ø –∫ –≤–ª–æ–∂–µ–Ω–∏—é.', 'danger')
            return redirect(url_for('outgoing.list_outgoing'))



    # üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–∏—è
    download_id = request.args.get('download')
    if download_id:
        attachment = Attachment.query.filter_by(
            id=download_id,
            letter_id=letter.id,
            letter_type='outgoing'
        ).first_or_404()

        if not os.path.exists(attachment.filepath):
            flash('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.', 'danger')
            return redirect(url_for('outgoing.attachments', letter_id=letter.id))

        return send_file(
            attachment.filepath,
            as_attachment=True,
            download_name=attachment.filename,
            mimetype='application/octet-stream'
        )

    # üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    if request.method == 'POST':
        file = request.files.get('file')
        if not file or file.filename.strip() == "":
            flash('–§–∞–π–ª –Ω–µ –≤—ã–±—Ä–∞–Ω.', 'warning')
            return redirect(request.url)

        original_name = file.filename.strip()
        already = Attachment.query.filter_by(
            letter_id=letter.id,
            letter_type='outgoing',
            filename=original_name
        ).first()

        if not allowed_file(original_name):
            flash('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ: PDF, Word, Excel, RAR.', 'danger')
            return redirect(request.url)

        if already and 'force' not in request.form:
            attachments = Attachment.query.filter_by(
                letter_id=letter.id, letter_type='outgoing'
            ).all()
            flash(f'–§–∞–π–ª "{original_name}" —É–∂–µ –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω. –ù–∞–∂–º–∏—Ç–µ "–ó–∞–≥—Ä—É–∑–∏—Ç—å –≤—Å—ë —Ä–∞–≤–Ω–æ", —á—Ç–æ–±—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å.', 'warning')
            return render_template(
                'outgoing/attachments.html',
                letter=letter,
                attachments=attachments,
                pending_upload=True,
                allowed_extensions=current_app.config['ALLOWED_EXTENSIONS']
            )

        save_attachment(file, letter, 'outgoing')
        flash('–í–ª–æ–∂–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.', 'success')
        return redirect(request.url)

    # üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–∏–π
    attachments = Attachment.query.filter_by(
        letter_id=letter.id, letter_type='outgoing'
    ).all()

    return render_template(
        'outgoing/attachments.html',
        letter=letter,
        attachments=attachments
    )

@outgoing_bp.route('/list')
@login_required
def list_outgoing():
    page = request.args.get('page', 1, type=int)
    per_page = request.args.get('per_page', type=int)
    if per_page:
        session['outgoing_per_page'] = per_page
    else:
        per_page = session.get('outgoing_per_page', 10)

    # üîç –§–∏–ª—å—Ç—Ä—ã
    query = LetterOutgoing.query

    number = request.args.get('number', '').strip()
    if number:
        query = query.filter(LetterOutgoing.number.ilike(f"%{number}%"))

    recipient = request.args.get('recipient', '').strip()
    if recipient:
        query = query.filter(LetterOutgoing.recipient.ilike(f"%{recipient}%"))

    date_from = request.args.get('date_from')
    date_to = request.args.get('date_to')
    if date_from:
        query = query.filter(LetterOutgoing.date_created >= date_from)
    if date_to:
        query = query.filter(LetterOutgoing.date_created <= date_to)

    subject = request.args.get('subject', '').strip()
    if subject:
        query = query.filter(LetterOutgoing.subject.ilike(f"%{subject}%"))


    # üìã –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–∞
    query = query.order_by(
        db.text("CAST(SUBSTRING(letter_outgoing.number FROM 3 FOR POSITION('/' IN letter_outgoing.number) - 3) AS INTEGER) DESC")
    )

    pagination = query.paginate(page=page, per_page=per_page, error_out=False)

    return render_template(
        'outgoing/list.html',
        pagination=pagination,
        letters=pagination.items,
        per_page=per_page,
        search_params={
            'number': number,
            'subject': subject,
            'recipient': recipient,
            'date_from': date_from,
            'date_to': date_to
        }
    )


@outgoing_bp.route('/<int:letter_id>/edit', methods=['GET', 'POST'])
@login_required
def edit_outgoing(letter_id):
    letter = LetterOutgoing.query.get_or_404(letter_id)
    if letter.user_id != current_user.id:
        flash('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.', 'danger')
        return redirect(url_for('outgoing.list_outgoing'))

    form = OutgoingForm(obj=letter)
    form.is_protected.data = letter.is_protected
    if form.validate_on_submit():
        letter.subject = form.subject.data
        letter.recipient = form.recipient.data
        letter.is_protected = form.is_protected.data
        db.session.commit()
        flash('–ü–∏—Å—å–º–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.', 'success')
        return redirect(url_for('outgoing.list_outgoing'))

    attachments = Attachment.query.filter_by(
        letter_id=letter.id, letter_type='outgoing'
    ).all()
    return render_template(
        'outgoing/edit.html',
        form=form,
        letter=letter,
        attachments=attachments
    )

@outgoing_bp.route('/<int:letter_id>/attachments/<int:attachment_id>/delete', methods=['POST'])
@login_required
def delete_attachment(letter_id, attachment_id):
    letter = LetterOutgoing.query.get_or_404(letter_id)

    # üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    if current_user.role.name not in ['Admin', 'Editor']:
        flash('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–ª–æ–∂–µ–Ω–∏–π.', 'danger')
        return redirect(url_for('outgoing.attachments', letter_id=letter_id))

    attachment = Attachment.query.filter_by(
        id=attachment_id,
        letter_id=letter_id,
        letter_type='outgoing'
    ).first_or_404()

    # üßπ –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å –¥–∏—Å–∫–∞
    try:
        if os.path.exists(attachment.filepath):
            os.remove(attachment.filepath)
    except Exception as e:
        flash(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}', 'warning')

    # ‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ –ë–î
    db.session.delete(attachment)
    db.session.commit()
    flash('–§–∞–π–ª —É–¥–∞–ª—ë–Ω.', 'success')
    return redirect(url_for('outgoing.attachments', letter_id=letter_id))


# –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –ø–∏—Å—å–º–∞
@outgoing_bp.route("/outgoing/delete/<int:letter_id>", methods=["POST"])
@admin_required
def delete_outgoing_letter(letter_id):  
    letter = LetterOutgoing.query.get_or_404(letter_id)
    letter.delete_with_attachments()
    db.session.commit()
    flash(f"–ü–∏—Å—å–º–æ {letter.number} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ ‚úÖ", "success")
    return redirect(url_for("outgoing.list_outgoing"))




# –ï–∫—Å–ø–æ—Ä—Ç –≤ exel
@outgoing_bp.route('/export')
@login_required
def export_outgoing():
    from openpyxl import Workbook
    from openpyxl.styles import Font, Alignment
    from io import BytesIO

    query = LetterOutgoing.query

    number = request.args.get('number', '').strip()
    if number:
        query = query.filter(LetterOutgoing.number.ilike(f"%{number}%"))

    recipient = request.args.get('recipient', '').strip()
    if recipient:
        query = query.filter(LetterOutgoing.recipient.ilike(f"%{recipient}%"))

    subject = request.args.get('subject', '').strip()
    if subject:
        query = query.filter(LetterOutgoing.subject.ilike(f"%{subject}%"))


    date_from = request.args.get('date_from')
    date_to = request.args.get('date_to')
    if date_from:
        query = query.filter(LetterOutgoing.date_created >= date_from)
    if date_to:
        query = query.filter(LetterOutgoing.date_created <= date_to)

    

    query = query.order_by(
        db.text("CAST(SUBSTRING(letter_outgoing.number FROM 3 FOR POSITION('/' IN letter_outgoing.number) - 3) AS INTEGER) DESC")
    )

    letters = query.all()

    wb = Workbook()
    ws = wb.active
    ws.title = '–ò—Å—Ö–æ–¥—è—â–∏–µ'

    headers = ['–ù–æ–º–µ—Ä', '–¢–µ–º–∞', '–ü–æ–ª—É—á–∞—Ç–µ–ª—å', '–î–∞—Ç–∞']
    ws.append(headers)

    for cell in ws[1]:
        cell.font = Font(bold=True)
        cell.alignment = Alignment(horizontal='center')

    for letter in letters:
        ws.append([
            letter.number,
            letter.subject,
            letter.recipient,
            letter.date_created.strftime('%Y-%m-%d') if letter.date_created else ''
        ])

    for column_cells in ws.columns:
        max_length = max(len(str(cell.value)) if cell.value else 0 for cell in column_cells)
        ws.column_dimensions[column_cells[0].column_letter].width = max_length + 4

    output = BytesIO()
    wb.save(output)
    output.seek(0)

    filename = f"–ò—Å—Ö–æ–¥—è—â–∏–µ_{datetime.datetime.utcnow().strftime('%Y-%m-%d')}.xlsx"
    return send_file(
        output,
        download_name=filename,
        as_attachment=True,
        mimetype='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
    )
